"""
It is obvious that this is coppersmith attack and after some reasarches we will know that this is 'Franklinâ€“Reiter related-message attack'
The implementation is not that hard we just need get signature twice to get different encrypted messages but with the same modulus n
"""


enc=[2093032334206410363620365777865098666195368613593893517704175049894650381065702164465258521750421502947617323667002696567628700500605994508103118472132330719913521450728852827355643968342947807184237401136046177288991365119935473305738258258627730651323886177793029699971804235839143014660974915854065822448189622144770398917247535190081223617668752052475994593032167903513812688405260987954646712669324457788343786111076982695939406049982794614252620476101876825734062634278683777244452524712840141175832993282029076274962592112478441872189599704829780127928501012008430412501804238395361704124477986287911396696754,6333121519340308526150312227030801884284443704742401969188013661585311283716500902856254844773307126810827615233099749988114188794385769979754775391542753271278330096511663654345348589120726436730103425394923919604775885925471217012342219803076992132824909740981919323171671490026750071849470886262455822550687271696007919738934772807412609284207662872597407220697752282203487335801982619061332817894304831979043758933709465821576521942171684861100234294204004488816049467273303551569577305342732360087370393475259417655288513012844304239220131504657467053195450224364341680317614605892168793285456432432580455187425]

padding = [[6746469086794932488780811439576847831199700327663188152492421473581242470126165737177255078972209128148390444221492659874259401646106902083067096980617621802215039645142196530814772053723639341501740302815217903547872975929256756726197064077381214191130412026036538677146412569880798030263225597055962013244517470846793892834148498263710119974562559309341749420462276311038786827873202092125744270551120297121652969694860545737658047247220858124672664518776873578735247412925761177250756172173472784351544161743331639141320660398422851635912507329943490591807111993529190159148990701060172777060523851116485128631910, 2596895375430572329662834315612846579594314528906957877680327356266224374191554292875528110382478915772909208976289180082249649511878678437531825680586932271355313343071370626564892437628565981531190072815397252779294056461342112926624942123837815277958337664699404743992398357816833768516364665953199540809399568683659891544898902212183625267071723978914153587897397811208649336877622165767660276729408561181693360579622756671630846996607048109685723795980607074237491331070122019349054402671468507418979993475321290450437278641618828212181536475174641490102217400400448266805174425388101217840906374704606530135624],[1041820259031063046142311828736453434515823308465406376913886416737193361233155514114903038739498409709801179153859880521589931537669525171547721179749006807116176871524165926892303725382374486045468866365728771491863794825985327912090809608645270757973129270076789621863905278245586353682233248357916084262563512824712397101415513262731385061819297970547645255552505261260347140835655094611656707841954351766629788019221686541020532495094868789061052426970172132795670569147165942887324217488345653774765531674077322960113468125019820740983217432808089015350374841847792461550744808520177767789126883943470513249699, 4106815505193116314469468187474961634583924693343328056382458443676325422407342044583815007270746326162296376860685426060436678731599844594380517723149334629098536310752096267111232683067557801275093778983736438714109758229552655116338451001682704239966176757396700129568027625608472382249919972976043254547195345718972594757303937062485808859379583219291223676725253974203044696947944789964129243976434603873745170354526696787261953675902238023249875382386804540397640548334521190843150983393303763165704897649681505161628386077030050956901802351013274497404160440768597400948387944409287761718229070141143476221956]]
n = 12709327090176281575123133506115080058127326526812164198482143790654434038328921072136219320951222960084833658498514913035571752525509174202126271974424284059152819054161669868735840048832911055594777958539044148689991930031409398579925384851073576559044585579886784082616934690845095339400284379559516844150921131077504617260873368514616484962064272816690123391847058903811887989277267224432687654473068244324571744121379525799840753716038321333615848343272392389526068658833081517989844355028815484904999074625915810047452547287395944277915111302518970553177902359418985830376292370110630600574344286376513634294949
def gcd(a,b):
    while b:
        a, b = b, a % b
    return a.monic()

P.<x> = PolynomialRing(Zmod(n))
p1 = (padding[0][0] * x + padding[0][1]) ^ e - enc[0]
p2 = (padding[1][0] * x + padding[1][1]) ^ e - enc[1]
m = -gcd(p1, p2).coefficients()[0]
flag = long_to_bytes(int(m)).decode()
print(flag)
